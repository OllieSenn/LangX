@page
@model LangX.Pages.LanguageExercisesModel
@{
    ViewData["Title"] = "Language Exercises";
}


<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - LangX</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="styles.css">

</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">LangX</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <form method="get" action="/Home" style="margin:0; padding:0;">
                            <button type="submit" class="nav-link active" style="background-color: transparent !important; background: none !important; color: black !important;">
                                Home
                            </button>
                        </form>
                    </li>
                    <li class="nav-item">
                        <form method="post" style="margin:0; padding:0;">
                            <button type="submit" asp-page-handler="ViewProfile" class="nav-link" style="background-color: transparent !important; background: none !important; color: black !important;">
                                 Profile
                            </button>
                        </form>
                    </li>
                    <li class="nav-item">
                        <form method="post" asp-page-handler="LogOut" style="margin:0; padding:0;">
                            <button type="submit" class="nav-link" style="background-color: transparent !important; background: none !important; color: black !important;">
                                Logout
                            </button>
                        </form>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <h1 style="text-align: center;">Language Exercises</h1>
    <p style="text-align: center;">Practice your language skills with these translation exercises. Choose a topic to get started.</p>

    @if (!Model.ShowResults && Model.CurrentExercises.Count == 0)
    {
        <form method="post" asp-page-handler="StartExercise">
            <h3 style="text-align: center;">Choose a topic:</h3>

            <div class="topic-buttons">
                <button type="submit" name="Topic" value="food" class="topic-button food-button">
                    <i class="fas fa-utensils"></i> Food
                </button>

                <button type="submit" name="Topic" value="travel" class="topic-button travel-button">
                    <i class="fas fa-plane"></i> Travel
                </button>

                <button type="submit" name="Topic" value="music" class="topic-button music-button">
                    <i class="fas fa-music"></i> Music
                </button>
            </div>
        </form>
    }
    else if (!Model.ShowResults)
    {
        <div class="exercise-container">
            <h2>Topic: @Model.Topic.ToUpper()</h2>
            <p>Translate the following French sentences to English:</p>

            <form method="post">
                <input type="hidden" name="Topic" value="@Model.Topic" />

                <div class="questions-container">
                    @for (int i = 0; i < Model.CurrentExercises.Count; i++)
                    {
                        <div class="question-card">
                            <div class="question-number">Question @(i + 1)</div>
                            <div class="d-flex align-items-center question-text-container">
                                <div class="question-text">@Model.CurrentExercises[i].Text</div>
                                <button type="button" class="text-speak-btn"
                                        data-text="@Model.CurrentExercises[i].Text"
                                        title="Listen to pronunciation">
                                    <i class="fas fa-volume-up"></i>
                                </button>
                            </div>

                            @if (Model.ShowHints)
                            {
                                <div class="hint-box">
                                    <strong>Hint:</strong> @Model.CurrentExercises[i].Hint
                                </div>
                            }

                            <input type="text" asp-for="UserAnswers[i]" class="answer-input" placeholder="Your translation..." />

                            <!-- Hidden fields to preserve question data -->
                            <input type="hidden" asp-for="QuestionTexts[i]" value="@Model.CurrentExercises[i].Text" />
                            <input type="hidden" asp-for="QuestionAnswers[i]" value="@Model.CurrentExercises[i].Answer" />
                            <input type="hidden" asp-for="QuestionHints[i]" value="@Model.CurrentExercises[i].Hint" />
                        </div>
                    }
                </div>

                <div class="button-group">
                    @if (!Model.ShowHints)
                    {
                        <button type="submit" asp-page-handler="ShowHints" class="hint-button">Show Hints</button>
                    }
                    <button type="submit" asp-page-handler="SubmitExercise" class="submit-button">Submit Answers</button>
                </div>
            </form>
        </div>
    }
    else
    {
        <div class="results-container">
            <h2>Exercise Results</h2>
            <div class="score-display">
                <div class="score-number">@Model.Score/@Model.CurrentExercises.Count</div>
                <div class="score-text">Questions Correct</div>
            </div>

            @if (Model.Score == Model.CurrentExercises.Count)
            {
                <div class="perfect-score">
                    <h3>Perfect Score! Excellent work!</h3>
                    <p>You've mastered this set of exercises. Try another topic to continue learning.</p>
                </div>
            }
            else if (Model.Score >= 4)
            {
                <div class="good-score">
                    <h3>Well Done!</h3>
                    <p>You're making good progress. Review your mistakes and try again to improve.</p>
                </div>
            }
            else
            {
                <div class="needs-practice">
                    <h3>Keep Practicing</h3>
                    <p>You're on your way to improvement. Review the corrections and try again.</p>
                </div>
            }

            @if (Model.IncorrectAnswers.Any())
            {
                <div class="corrections-section">
                    <h3>Corrections:</h3>
                    <div class="corrections-list">
                        @foreach (var item in Model.IncorrectAnswers)
                        {
                            <div class="correction-item">
                                <div class="d-flex align-items-center">
                                    <div class="correction-question">@item.Question</div>
                                    <button type="button" class="text-speak-btn"
                                            data-text="@item.Question"
                                            title="Listen to pronunciation">
                                        <i class="fas fa-volume-up"></i>
                                    </button>
                                </div>
                                <div class="correction-user">Your answer: <span class="user-answer">@item.UserAnswer</span></div>
                                <div class="correction-correct">Correct answer: <span class="correct-answer">@item.CorrectAnswer</span></div>
                            </div>
                        }
                        <!-- Add this to the results section, right after the corrections list -->
                        @if (Model.IncorrectAnswers.Any())
                        {
                            <div class="share-section mt-4">
                                <h3>Need help with a question?</h3>
                                <p>Share the last question you got wrong to get help from the community!</p>

                                <div class="share-preview card mb-3">
                                    <div class="card-body">
                                        <h5 class="card-title">Preview</h5>
                                        <p class="card-text">Hey, I need help on this exercise! "@Model.IncorrectAnswers.Last().Question"</p>
                                    </div>
                                </div>

                                <form method="post" asp-page-handler="ShareQuestion">
                                    <input type="hidden" name="questionText" value="@Model.IncorrectAnswers.Last().Question" />
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-share-alt"></i> Share This Question
                                    </button>
                                </form>
                            </div>
                        }
                    </div>
                </div>
            }

            <form method="get" class="try-again-form">
                <button type="submit" class="try-again-button">Try Another Exercise</button>
            </form>
        </div>
    }

    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        h1, h2, h3 {
            color: #333;
        }

        /* Topic selection styles */
        .topic-buttons {
            display: flex;
            gap: 20px;
            margin: 25px;
            flex-wrap: wrap;
            margin-left: 30%;
        }

        .topic-button {
            padding: 20px 30px;
            font-size: 18px;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.3s;
            display: flex;
            flex-direction: row;
            align-items: center;
            gap: 10px;
            min-width: 150px;
        }

            .topic-button:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.1);
            }

            .topic-button i {
                font-size: 24px;
                margin-bottom: 5px;
            }

        .food-button {
            background-color: #e74c3c;
        }

        .travel-button {
            background-color: #3498db;
        }

        .music-button {
            background-color: #9b59b6;
        }

        /* Exercise styles */
        .exercise-container {
            margin-top: 20px;
        }

        .questions-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-top: 20px;
        }

        .question-card {
            background-color: #f9f9f9;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            position: relative;
        }

        .question-number {
            position: absolute;
            top: -12px;
            left: 20px;
            background-color: #2c3e50;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
        }

        .question-text-container {
            margin: 25px 0 15px;
        }

        .question-text {
            font-size: 18px;
            color: #333;
            font-style: italic;
            margin-right: 10px;
        }

        /* Audio button styles */
        .text-speak-btn {
            color: #3498db;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 18px;
            padding: 5px;
            border-radius: 50%;
            transition: all 0.2s;
        }

            .text-speak-btn:hover {
                color: #2980b9;
                background-color: rgba(52, 152, 219, 0.1);
            }

            .text-speak-btn:active {
                transform: scale(0.95);
            }

        /* Pulsing animation for speaking state */
        @@keyframes pulse {
            0%

        {
            opacity: 1;
        }

        50% {
            opacity: 0.3;
        }

        100% {
            opacity: 1;
        }

        }

        .speaking {
            animation: pulse 1s infinite;
        }

        .hint-box {
            background-color: #fffde7;
            padding: 10px 15px;
            border-left: 4px solid #ffd54f;
            margin-bottom: 15px;
            border-radius: 4px;
        }

        .answer-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

            .answer-input:focus {
                border-color: #3498db;
                outline: none;
            }

        .button-group {
            display: flex;
            gap: 15px;
            margin-top: 30px;
            justify-content: center;
        }

        .hint-button {
            padding: 12px 25px;
            background-color: #f39c12;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .hint-button:hover {
                background-color: #e67e22;
            }

        .submit-button {
            padding: 12px 25px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .submit-button:hover {
                background-color: #27ae60;
            }

        /* Results styles */
        .results-container {
            background-color: #f9f9f9;
            border-radius: 10px;
            padding: 30px;
            max-width: 800px;
            margin: 0 auto;
        }

        .score-display {
            text-align: center;
            margin: 20px 0 30px;
        }

        .score-number {
            font-size: 48px;
            font-weight: bold;
            color: #2c3e50;
        }

        .score-text {
            font-size: 18px;
            color: #7f8c8d;
        }

        .perfect-score {
            background-color: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 25px;
        }

        .good-score {
            background-color: #fff3cd;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 25px;
        }

        .needs-practice {
            background-color: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 25px;
        }

        .corrections-section {
            margin-top: 30px;
        }

        .corrections-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .correction-item {
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .correction-question {
            font-weight: bold;
            margin-bottom: 10px;
            font-style: italic;
            margin-right: 10px;
        }

        .user-answer {
            color: #e74c3c;
        }

        .correct-answer {
            color: #2ecc71;
            font-weight: bold;
        }

        .try-again-form {
            margin-top: 30px;
            text-align: center;
        }

        .try-again-button {
            padding: 12px 25px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .try-again-button:hover {
                background-color: #2980b9;
            }

        .share-section {
            background-color: #e8f4fd;
            padding: 20px;
            border-radius: 8px;
            margin-top: 25px;
            border-left: 4px solid #3498db;
        }

            .share-section h3 {
                color: #2980b9;
                margin-bottom: 10px;
            }

        .share-preview {
            border: 1px dashed #bdc3c7;
            background-color: #f8f9fa;
            margin: 15px 0;
        }

            .share-preview .card-text {
                font-style: italic;
                color: #555;
            }
    </style>

    <!-- Icon style sheet -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <!-- JavaScript for the text-to-speech functionality -->
    <script>
           document.addEventListener('DOMContentLoaded', function() {
            let voicesLoaded = false;
            let availableVoices = [];

            // Function to load and cache voices
            function loadVoices() {
                availableVoices = window.speechSynthesis.getVoices();
                voicesLoaded = availableVoices.length > 0;

                if (voicesLoaded) {
                    const frenchVoices = availableVoices.filter(voice =>
                        voice.lang.toLowerCase().includes('fr') ||
                        voice.lang.toLowerCase().startsWith('fr-')
                    );
                    console.log("French voices available:", frenchVoices.map(v => `${v.name} (${v.lang})`));
                }

                return voicesLoaded;
            }

            // Initial voice loading
            loadVoices();

            // Handle voice loading for different browsers
            if (speechSynthesis.onvoiceschanged !== undefined) {
                speechSynthesis.onvoiceschanged = function() {
                    loadVoices();
                };
            }

            // Get all text-to-speech buttons
            const speakButtons = document.querySelectorAll('.text-speak-btn');

            // Add click event listener to each button
            speakButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const text = this.getAttribute('data-text');
                    const icon = this.querySelector('i');

                    // Toggle speaking class for visual feedback
                    if (icon.classList.contains('speaking')) {
                        window.speechSynthesis.cancel();
                        icon.classList.remove('speaking');
                        return;
                    }

                    speakText(text, icon);
                });
            });

            // Function to speak text using Web Speech API
            function speakText(text, iconElement) {
                // Check if browser supports speech synthesis
                if (!('speechSynthesis' in window)) {
                    alert("Sorry, your browser doesn't support text to speech!");
                    return;
                }

                // Ensure voices are loaded before proceeding
                if (!voicesLoaded) {
                    loadVoices();

                    // If still not loaded, wait a bit and try again
                    if (!voicesLoaded) {
                        setTimeout(() => speakText(text, iconElement), 100);
                        return;
                    }
                }

                // Create a new speech synthesis utterance
                const utterance = new SpeechSynthesisUtterance(text);

                // Set language to French
                utterance.lang = 'fr-FR';

                // Find the best French voice
                const frenchVoices = availableVoices.filter(voice => {
                    const lang = voice.lang.toLowerCase();
                    return lang.includes('fr') || lang.startsWith('fr-');
                });

                if (frenchVoices.length > 0) {
                    // Prefer fr-FR voices, then any French voice
                    const preferredVoice = frenchVoices.find(voice =>
                        voice.lang.toLowerCase() === 'fr-fr'
                    ) || frenchVoices[0];

                    utterance.voice = preferredVoice;
                    console.log(`Using voice: ${preferredVoice.name} (${preferredVoice.lang})`);
                } else {
                    console.warn("No French voice found, using default voice with fr-FR lang setting");
                }

                // Set other properties
                utterance.rate = 0.9; // Slightly slower for better comprehension
                utterance.pitch = 1;
                utterance.volume = 1;

                // Add visual feedback
                if (iconElement) {
                    iconElement.classList.add('speaking');

                    // Add event listeners to handle speech events
                    utterance.onend = function() {
                        iconElement.classList.remove('speaking');
                    };

                    utterance.onerror = function(event) {
                        iconElement.classList.remove('speaking');
                        console.error("Speech synthesis error:", event.error);
                    };

                    utterance.onstart = function() {
                        console.log("Speech started");
                    };
                }

                // Stop any current speech
                window.speechSynthesis.cancel();

                // Small delay to ensure cancellation is processed
                setTimeout(() => {
                    window.speechSynthesis.speak(utterance);
                }, 50);
            }      
        });
    </script>
</body>